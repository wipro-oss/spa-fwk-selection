define({
  'developer-productivity': 'How productive the developer can be using the framework',
  'developer-perception': 'How happy are developers using the framework',
  'learning-curve': 'How easy or difficult is it for new developers to learn the framework and become productive',
  'project-health': 'How healthy is the project, number of releases, frequency of releases, mailing list traffic, questions on stackoverflow etc.',
  'developer-availability': 'How many developers are available with the framework skillset',
  'job-trends': 'How has the job trend been for the framework? Is it increasing, decreasing, stagnant etc.',
  'templating': 'Availability of templating engines for the framework, ease of use,  pluggability etc.',
  'components': 'Breaking down of functionality into smaller self contained components which can be reused',
  'ajax': 'AJAX support, cross domain requests, helpers etc.',
  'seo-support': 'Applications open to the internet will require the application to be crawlable by search spiders so that the application will figure prominently in search results',
  'testing': 'How much support for testing the framework has built-in',
  'i18n-and-l10n': 'Support for internationalization and localization',
  'validation': 'Frameworkâ€™s support for user-input/model validation',
  'ie-support': 'Intranet applications are used by a smaller group of users typically within a company (sometimes including vendors) distributed in geographical clusters. Intranet applications mostly will only be accessible from within an office network. Internet applications cater to a much wider audience which may be distributed.',
  'handle-large-number-of-data-elements': 'Number of UI elements present on the screen at any point in time. Certain screens may contain more than some others. For eg. Reporting screens might contain more elements displayed than data capture screens.',
  'routing': 'Framework support for routing between multiple views (controller/router/dispatcher support)',
  'isomorphic': 'Isomorphism is the ability to run the same code on the client and the server. Since the introduction of NodeJS in 2009 isomorphic javascript applications have become a reality.',
  'tool-support-build-browser-plugins-live-reload': 'The ecosystem for front-end web development has exploded there are multiple languages, different versions of standards and different browser implementations. The need for tools to handle dependencies, package management and distribution has fueled the creation of a plethora of tools',
  'offline-support': 'In case of applications that have to operate in intermittent connectivity environments the data and user experience has to be consistent both while online and offline.',
  'convention-over-configuration': 'Developing and maintaining a large monolithic codebase is cumbersome. So, the ability to break up functionality into modules allows the application to have a coherent structure and streamlines development and maintenance. Frameworks which are more opinionated about the organization of code rate higher because it is easier for new developers to navigate the codebase',
  'framework-complexity': 'The more complex the framework code the more difficult the learning curve. Debugging the errors thrown from the framework can also be easier if the framework complexity is lower.',
  'quality-of-documentation-tutorials': 'How good the documentation is. Tutorial-style documentation is preferred, reference-style is essential'
})
